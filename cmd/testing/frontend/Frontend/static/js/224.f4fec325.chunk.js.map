{"version":3,"file":"static/js/224.f4fec325.chunk.js","mappings":"6LAgBA,MAmFA,EA9EiBA,IAAoC,IAAnC,KAAEC,EAAI,KAAEC,GAAqBF,EAC7C,MAAMG,EAAUC,EAAAA,SAAc,IACvBF,EAAKG,WACU,kBAATJ,EACFK,WAAWL,GAAMM,QAAQL,EAAKG,YACd,kBAATJ,EACPA,EAAKM,QAAQL,EAAKG,YACA,WAAlBH,EAAKM,SACL,CACLC,UAAYH,WACTL,EAA6BQ,WAC9BF,QAAQL,EAAKG,YACfK,WAAcT,EAA6BS,iBAL1C,EALwBT,GAY5B,CAACA,EAAMC,IACJS,EAAWP,EAAAA,aAAkB,KAChB,IAAIQ,EAAAA,GACnB,MAAO,yCAA0CC,EAAAA,IAE1CC,IAAI,CAAC,EAAG,CAAC,EAAG,CAACC,OAASZ,IAC9Ba,MAAMC,IACLC,OAAOC,KAAKF,EAAKhB,KAAM,SAAS,IAEjCmB,OAAOC,GAAYC,QAAQC,MAAMF,IAAK,GACtC,CAAClB,IAEEqB,EAASpB,EAAAA,SAAc,IACL,WAAlBF,EAAKM,UACAiB,EAAAA,EAAAA,KAAA,KAAAC,SAAKvB,EAAgCM,YAElCN,GACX,CAACF,EAAMC,IAEJyB,EAAOvB,EAAAA,SAAc,KACzB,GAAsB,WAAlBF,EAAKM,SAAsB,CAC7B,MAAMoB,EAAezB,EACrB,OACEsB,EAAAA,EAAAA,KAAA,KAAAC,SAEIE,EAAalB,WACbkB,EAAalB,WAAakB,EAAanB,WAI/C,CACK,OAAON,CAAO,GAClB,CAACF,EAAMC,IAEJ2B,EAAQzB,EAAAA,SAAc,KAC1B,GAAsB,WAAlBF,EAAKM,SAAsB,CAC7B,MAAMoB,EAAezB,EACrB,OAAOyB,EAAalB,YAAckB,EAAanB,SACjD,CACK,MAAO,EAAE,GACb,CAACR,EAAMC,IAEV,MACgB,WAAdA,EAAKA,MAAwC,kBAAZC,GA7DV,qBACD2B,KA4D4C3B,IAGhEsB,EAAAA,EAAAA,KAAA,OAAKM,UAAY,8BAA8BC,QAAWrB,EAASe,UACjED,EAAAA,EAAAA,KAAA,KAAAC,SAAIvB,MAIiB,SAAlBD,EAAKM,UAEViB,EAAAA,EAAAA,KAAA,OAAKM,UAAY,qBAAoBL,UACnCD,EAAAA,EAAAA,KAAA,KAAAC,SAAIvB,OAKNsB,EAAAA,EAAAA,KAACQ,EAAAA,EAAQ,CAACzB,SAAYN,EAAKM,SAAUgB,OAAUA,EAAQG,KAAQA,EAAME,MAAOA,GAAQ,C","sources":["display/share/V1Table/Text.tsx"],"sourcesContent":["import React from 'react';\r\nimport './table.css';\r\nimport {\r\n  TableCell_ZoomableI,\r\n  TableType_ZoomableSortableT\r\n} from 'interfaces/oneTableDisplay/v1';\r\nimport Zoomable from \"./Zoomable\";\r\nimport { TokenEndpoint, UNIVERSAL_TOKEN } from 'API/base';\r\n\r\n\r\nexport type TextCellProps = {\r\n  data: TableCell_ZoomableI | string | number | React.ReactNode,\r\n  type: TableType_ZoomableSortableT\r\n};\r\n\r\n\r\nconst isLigand = (text:string) => {\r\n  const validLigandRegex = /(FDA|MCULE|ZINC|Z)/\r\n  return validLigandRegex.test(text)\r\n}\r\n\r\nconst TextCell = ({ data, type }: TextCellProps) => {\r\n  const content = React.useMemo(() => {\r\n    if (!type.fpAccuracy) return data\r\n    if (typeof data === 'string')\r\n      return parseFloat(data).toFixed(type.fpAccuracy)\r\n    else if (typeof data === 'number')\r\n      return data.toFixed(type.fpAccuracy)\r\n    else if (type.zoomable === 'normal')\r\n      return {\r\n        shortText : parseFloat(\r\n          (data as TableCell_ZoomableI).shortText\r\n        ).toFixed(type.fpAccuracy),\r\n        zoomedText : (data as TableCell_ZoomableI).zoomedText\r\n      }\r\n  }, [data, type])\r\n  const redirect = React.useCallback(() => {\r\n    const endpoint = new TokenEndpoint(\r\n      'get', 'api-library/direct/ligand-name-to-zinc', UNIVERSAL_TOKEN\r\n    )\r\n    endpoint.req({}, {}, {ligand : content})\r\n    .then((resp:any) => {\r\n      window.open(resp.data, '_blank')\r\n    })\r\n    .catch((err:any) => console.error(err))\r\n  }, [content])\r\n\r\n  const noZoom = React.useMemo(() => {\r\n    if (type.zoomable === 'normal'){\r\n      return <p>{(content as TableCell_ZoomableI).shortText}</p>\r\n    }\r\n    else return content as React.ReactNode\r\n  }, [data, type])\r\n\r\n  const zoom = React.useMemo(() => {\r\n    if (type.zoomable === 'normal'){\r\n      const assertedData = content as TableCell_ZoomableI\r\n      return (\r\n        <p>\r\n          {\r\n            assertedData.zoomedText ?\r\n            assertedData.zoomedText : assertedData.shortText\r\n          }\r\n        </p>\r\n      )\r\n    }\r\n    else return content as React.ReactNode\r\n  }, [data, type])\r\n\r\n  const smile = React.useMemo(() => {\r\n    if (type.zoomable === 'normal'){\r\n      const assertedData = content as TableCell_ZoomableI\r\n      return assertedData.zoomedText || assertedData.shortText\r\n    }\r\n    else return ''\r\n  }, [data, type])\r\n\r\n  if (\r\n    type.type === 'string' && typeof content === 'string' && isLigand(content)\r\n  ){\r\n    return (\r\n      <div className = 'table-cell-content zoomable' onClick = {redirect}>\r\n        <p>{content}</p>\r\n      </div>\r\n    )\r\n  }\r\n  else if (type.zoomable === 'none')\r\n    return (\r\n      <div className = 'table-cell-content'>\r\n        <p>{content as React.ReactNode}</p>\r\n      </div>\r\n    )\r\n  else\r\n    return (\r\n      <Zoomable zoomable = {type.zoomable} noZoom = {noZoom} zoom = {zoom} smile={smile}/>\r\n    )\r\n\r\n};\r\n\r\nexport default TextCell\r\n"],"names":["_ref","data","type","content","React","fpAccuracy","parseFloat","toFixed","zoomable","shortText","zoomedText","redirect","TokenEndpoint","UNIVERSAL_TOKEN","req","ligand","then","resp","window","open","catch","err","console","error","noZoom","_jsx","children","zoom","assertedData","smile","test","className","onClick","Zoomable"],"sourceRoot":""}