{"version":3,"file":"static/js/356.370c7490.chunk.js","mappings":"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","sources":["components/pagination/pagination-panel.tsx","components/pagination/pagination-component.tsx","components/table/auto-adjust-row.tsx","components/table/new-table.tsx","components/pagination/paginationcomponent.tsx","components/table/old-table.js","components/table/table.tsx","display/share/V1Table/table_manager.ts","display/share/V1Table/table.tsx"],"sourcesContent":["import React from \"react\";\nimport Lister from \"../lister/lister\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport {\n  faAngleLeft,\n  faAngleRight,\n  faAngleDoubleLeft,\n  faAngleDoubleRight\n} from \"@fortawesome/free-solid-svg-icons\"\n\nconst DEFAULT_PAGE_NEIGHBOURS = 2\nconst LEFT_PAGE = \"LEFT\";\nconst RIGHT_PAGE = \"RIGHT\";\nconst LEFT = \"BEGINNING\";\nconst RIGHT = \"LAST\";\n\nconst range = (from : number, to : number, step : number = 1) => {\n  const size = Math.ceil((to - from) / step) + 1\n  return Array(size)\n    .fill(null)\n    .map((_, id) => id * step + from)\n}\n\ntype PaginationButtonP = {\n  data : string | number\n  id : number\n  advanceLeft : () => void\n  advanceRight : () => void\n  advanceLast : () => void\n  advanceFirst : () => void\n  advanceToPage : (page : number) => void\n  className : string\n  currentPage : number\n}\nconst PaginationButton = (props : PaginationButtonP) => {\n  const className = props.className\n  if (props.data === LEFT)\n    return (\n      <li className={`${className} pagination-item`}>\n        <button\n          className={`${className} page-left-button pagination-item-button`}\n          onClick={props.advanceFirst}\n        >\n          <span className={`${className} pagination-item-prev`}>\n            <FontAwesomeIcon icon={faAngleDoubleLeft}/>\n            </span>\n        </button>\n      </li>\n    )\n  else if (props.data === LEFT_PAGE)\n    return (\n      <li className={`${className} pagination-item`}>\n        <button\n          className={\n            `${className} page-left-button pagination-item-button`\n          }\n          onClick={props.advanceLeft}\n        >\n          <span className={`${className} pagination-item-prev`}>\n            <FontAwesomeIcon icon={faAngleLeft}/>\n            </span>\n        </button>\n      </li>\n    )\n  else if (props.data === RIGHT)\n    return (\n      <li className={`${className} pagination-item`}>\n        <button\n          className={`${className} pagination-item-button`}\n          onClick={props.advanceLast}\n        >\n          <span className={`${className} pagination-item-next`}>\n            <FontAwesomeIcon icon={faAngleDoubleRight}/>\n            </span>\n        </button>\n      </li>\n    )\n  else if (props.data === RIGHT_PAGE)\n    return (\n      <li className={`${className} pagination-item`}>\n        <button\n          className={`${className} pagination-item-button`}\n          onClick={props.advanceRight}\n        >\n          <span className={`${className} pagination-item-next`}>\n            <FontAwesomeIcon icon={faAngleRight}/>\n          </span>\n        </button>\n      </li>\n    )\n  else if (typeof props.data === 'number')\n    return (\n      <li\n        className={`${className} pagination-item ${\n          props.currentPage === props.data ? \"active\" : \"\"\n        }`}\n      >\n        <button\n          className = {`${className} pagination-item-button`}\n          onClick = {() => props.advanceToPage(props.data as number)}\n          // Type check in the if expression\n        >\n          {props.data}\n        </button>\n      </li>\n    )\n  else\n    return <></>\n}\n\ntype PaginationPanelP = {\n  totalRecords : number\n  totalPage : number\n  currentPage : number\n  setPage : (page : number) => void\n  pageNeighbours? : number\n  className? : string\n}\n\nconst PaginationPanel = (props : PaginationPanelP) => {\n  const onPageClick = React.useCallback(\n    (page : number) => props.setPage(page), [props.setPage]\n  )\n  const onAdvanceLeftClick = React.useCallback(\n    () => props.setPage(props.currentPage - 1),\n    [props.setPage, props.currentPage]\n  )\n  const onAdvancedRightClick = React.useCallback(\n    () => props.setPage(props.currentPage + 1),\n    [props.setPage, props.currentPage]\n  )\n  const advanceToFirst = React.useCallback(\n    () => props.setPage(1), [props.setPage]\n  )\n  const advanceToLast = React.useCallback(\n    () => props.setPage(props.totalPage), [props.setPage, props.totalPage]\n  )\n  const pageNumbers = React.useMemo(\n    () => {\n      // THIS ALGORITHM NEED REFACTORING, IT IS UNCLEAR\n      const pageNeighbours = Math.max(\n        0, Math.min(\n          props.pageNeighbours ? props.pageNeighbours : 2,\n          DEFAULT_PAGE_NEIGHBOURS\n        )\n      )\n      const totalPage = props.totalPage\n      const currentPage = props.currentPage\n      const totalNumbers = pageNeighbours * 2 + 3\n      const totalBlocks = totalNumbers + 2\n      if (totalPage < totalBlocks)\n        return range(1, props.totalPage)\n      let pages = [];\n      const leftBound = currentPage - pageNeighbours;\n      const rightBound = currentPage + pageNeighbours;\n      const beforeLastPage = totalPage;\n      const startPage = leftBound > 1 ? leftBound : 1;\n      const endPage = rightBound < beforeLastPage ? rightBound : beforeLastPage;\n      pages = range(startPage, endPage)\n      const pagesCount = pages.length;\n      const singleSpillOffset = totalNumbers - pagesCount - 2;\n      const leftSpill = startPage > 2;\n      const rightSpill = endPage < beforeLastPage;\n      const leftSpillPage = LEFT_PAGE;\n      const rightSpillPage = RIGHT_PAGE;\n      if (leftSpill && !rightSpill) {\n        const extraPages = range(startPage - singleSpillOffset, startPage - 1);\n        pages = [...extraPages, ...pages];\n      } else if (!leftSpill && rightSpill) {\n        const extraPages = range(endPage + 1, endPage + singleSpillOffset);\n        pages = [...pages, ...extraPages];\n      } else if (leftSpill && rightSpill) {\n        pages = [...pages];\n      }\n      return [LEFT, leftSpillPage, ...pages,rightSpillPage, RIGHT];\n\n    }, [props.pageNeighbours, props.totalPage, props.currentPage]\n  )\n  if (props.totalRecords === 0) return null\n  else if (props.totalPage === 1) return null\n  const currentPage = props.currentPage\n  const {className = ''} = props\n  return (\n    <nav className = {`${className} pagination-nav`}>\n      <ul className = {`${className} pagination-list`}>\n        <Lister\n          array = {pageNumbers}\n          render = {PaginationButton}\n          props = {{\n            advanceLeft : onAdvanceLeftClick,\n            advanceRight : onAdvancedRightClick,\n            advanceLast : advanceToLast,\n            advanceFirst : advanceToFirst,\n            currentPage : currentPage,\n            className : className,\n            advanceToPage : onPageClick\n          }}\n        />\n      </ul>\n    </nav>\n  )\n}\n\nexport default PaginationPanel\n","  import React from 'react';\nimport Lister from '../lister/lister';\nimport PaginationPanel from './pagination-panel';\nimport './paginationlist.css'\n\n\n\nconst PAGINATION_PAGE_SIZE = 10\n\ntype PaginationChildRenderP<T, U> = {\n  data : T, id : number\n} & U\n\ntype PaginationChildP<T, U> = {\n  render :\n    React.ComponentType<PaginationChildRenderP<T, U>> |\n    React.LazyExoticComponent<React.ComponentType<PaginationChildRenderP<T, U>>>\n  props : U\n  idStart : number,\n  data : T,\n  id : number\n}\n\nconst PaginationChild =\n<T, U>(props : PaginationChildP<T, U>) => {\n  const {idStart, id, data} = props\n  const Component = props.render\n  const renderProps = {\n    data : data, id : idStart + id, ...props.props\n  } as (\n    JSX.IntrinsicAttributes &\n    PaginationChildRenderP<T, U> &\n    React.PropsWithRef<PaginationChildRenderP<T, U>>\n  )\n  return (\n    <Component {...renderProps} />\n  )\n}\n\n\nexport type PaginationP<T, U> = {\n  data : Array<T>\n  render :\n    React.ComponentType<PaginationChildRenderP<T, U>> |\n    React.LazyExoticComponent<React.ComponentType<PaginationChildRenderP<T, U>>>\n  props : U\n  pageNeighbours? : number\n  onPageChange? : (page : number) => void\n  page? : number\n  showPanel? : boolean\n  className? : string\n  pageSize? : number\n}\n\nconst NewPagination = <T, U>(props : PaginationP<T, U>) => {\n  const [state, setState] = React.useState({ currentPage : 1})\n  const numPages = React.useMemo(() => {\n    const pageSize = props.pageSize ? props.pageSize : PAGINATION_PAGE_SIZE\n    return Math.ceil(props.data.length / pageSize)\n  }, [ props ])\n  const getCurrentPage = React.useCallback(() => {\n    if (props.page && props.page < 1)\n      throw Error(\"Page number should never be less than zero\")\n    return props.page ? props.page : state.currentPage\n  }, [state.currentPage, props.page])\n  const setPage = React.useCallback((page : number) => {\n    if (page < 1 || page > numPages)\n      return\n    setState({currentPage : page})\n    if (props.onPageChange) props.onPageChange(page)\n  }, [setState, props.onPageChange, numPages])\n  const table = React.useMemo(() => {\n    const pageSize = props.pageSize ? props.pageSize : PAGINATION_PAGE_SIZE\n    const pageNum = getCurrentPage()\n    const startId = (pageNum - 1) * pageSize\n    const expectedEnd = pageNum * pageSize\n    const endId = expectedEnd > props.data.length ?\n      props.data.length : expectedEnd\n    const paginatedData = props.data.slice(startId, endId)\n    return (\n      <Lister\n        array = {paginatedData}\n        render = {PaginationChild}\n        props = {{\n          idStart : startId,\n          render : props.render,\n          props : props.props\n        }}\n      />\n    )\n  }, [\n    getCurrentPage, props\n  ])\n  const {className = '', showPanel = true} = props\n  return (\n    <div className = {`${className} pagination-container`}>\n      <div className = {`${className} pagination-render-item`}>\n        {table}\n      </div>\n      <div className = {`${className} pagination-wrapper`}>\n        {showPanel  && numPages > 1 &&\n          <PaginationPanel\n            totalRecords = {props.data.length}\n            currentPage = {getCurrentPage()}\n            setPage = {setPage}\n            pageNeighbours = {props.pageNeighbours}\n            className = {props.className}\n            totalPage = {numPages}\n          />\n        }\n      </div>\n    </div>\n  )\n}\n\nexport default NewPagination\n","import React from \"react\"\nimport Lister from \"../lister/lister\"\n\nexport type TableCellChildP <T, U> = {\n  data : T, rowId : number, colId : number\n} & U\n\nexport type AutoAdjustCellP<T, U> = {\n  data : T,\n  id : number,\n  className : string,\n  length : number,\n  render : React.ComponentType<TableCellChildP<T, U>> |\n    React.LazyExoticComponent<React.ComponentType<TableCellChildP<T, U>>>,\n  props : U,\n  rowId : number\n}\nexport const AutoAdjustCell = <T, U>(props : AutoAdjustCellP<T, U>) => {\n  const style = {\n    minWidth : `calc(100% / ${props.length})`,\n    width : `calc(100% / ${props.length - 1})`\n  }\n  const Component = props.render\n  const newProps = {\n    data : props.data,\n    rowId : props.rowId,\n    colId : props.id,\n    ...props.props\n  } as (\n    TableCellChildP<T, U> &\n    JSX.IntrinsicAttributes &\n    React.PropsWithRef<TableCellChildP<T, U>>\n  )\n  return (\n    <div\n      className = {`${props.className} component-table-cell`}\n      style = {style}\n    >\n      <Component {...newProps} />\n    </div>\n  )\n}\n\nexport type TableRowChildP<T, U> = {\n  data : T, id : number, length : number, className : string, rowId : number\n} & U\n\nexport type GenericAutoAdjustRowP<T, U> = {\n  mobile : boolean\n  data : Array<T>,\n  id : number,\n  className : string,\n  render : React.ComponentType<TableRowChildP<T, U>> |\n    React.LazyExoticComponent<React.ComponentType<TableRowChildP<T, U>>>\n  props : U\n}\n\nexport const GenericAutoAdjustRow =\n<T, U>(props : GenericAutoAdjustRowP<T, U>) => {\n  const {mobile, data, className, id} = props\n  const mobileClass = mobile ? 'mobile' : 'desktop'\n  const combine = `${className} ${mobileClass}`\n  const totalLength = data.length\n  return (\n    <div className = {`component-table-row ${combine}`}>\n      <Lister\n        array = {data}\n        render = {props.render}\n        props = {{\n          className : mobileClass,\n          length : totalLength,\n          rowId : id,\n          ...props.props\n        }}\n      />\n    </div>\n  )\n}\n\nexport type AutoAdjustRowP<T, U> = {\n  mobile : boolean\n  data : Array<T>,\n  id : number,\n  className : string,\n  render : React.ComponentType<TableCellChildP<T, U>> |\n    React.LazyExoticComponent<React.ComponentType<TableCellChildP<T, U>>>,\n  props : U\n}\n\nexport const AutoAdjustRow = <T, U>(props : AutoAdjustRowP<T, U>) => {\n  return (\n    <GenericAutoAdjustRow\n      mobile = {props.mobile}\n      data = {props.data}\n      id = {props.id}\n      className = {props.className}\n      render = {AutoAdjustCell}\n      props = {{\n        render : props.render,\n        props : props.props\n      }}\n    />\n  )\n}\n\nexport default AutoAdjustRow\n","import React from \"react\";\nimport\n  Pagination, { PaginationP }\nfrom \"../pagination/pagination-component\";\nimport {\n  GenericAutoAdjustRow,\n  GenericAutoAdjustRowP,\n  TableRowChildP\n} from \"./auto-adjust-row\";\nimport \"./table.css\"\n\nexport type TableChildRenderP<T, U> = Omit<\n  GenericAutoAdjustRowP<T, U>, \"render\" | \"props\"\n> & U\n\nexport type TableP<T, U, V, W> = {\n  rows : Array<Array<T>>\n  headers : Array<V>\n\n  rowRender :\n    React.ComponentType<TableChildRenderP<T, U>> |\n    React.LazyExoticComponent<\n      React.ComponentType<TableChildRenderP<T, U>>\n    >\n  rowProps : U\n\n  headerRender :\n    React.ComponentType<TableRowChildP<V, W>> |\n    React.LazyExoticComponent<\n      React.ComponentType<TableRowChildP<V, W>>\n    >\n  headerProps : W\n\n  className? : string\n  paginate? : Omit<PaginationP<Array<T>, U>, \"data\" | \"render\" | \"props\">\n  emptyRender? : React.ReactNode\n}\n\nconst  NewTable =\n<T, U, V, W>(props : TableP<T, U, V, W>) => {\n  const [state, setState] = React.useState({isMobile : false})\n  const setMobile = React.useCallback(() => {\n    setState({isMobile : window.innerWidth < 1280})\n  }, [ setState ])\n  React.useEffect(() => {\n    setMobile()\n    window.addEventListener('resize', setMobile, false)\n  }, [])\n  const {\n    rows, headers, className = '', paginate = {},rowRender, emptyRender = <></>,\n    rowProps, headerRender, headerProps\n  } = props\n  if (rows.length === 0 && emptyRender)\n    return <>{emptyRender}</>\n  return (\n    <div className = {`component-table ${className}`}>\n      <GenericAutoAdjustRow\n        data = {headers}\n        render = {headerRender}\n        props = {headerProps}\n        id = {0}\n        className = {className + ' table-header'}\n        mobile = {state.isMobile}\n      />\n      <Pagination\n        data = {rows}\n        render = {rowRender}\n        props = {{\n          mobile : state.isMobile,\n          className : className,\n          ...rowProps\n        }}\n        {...paginate}\n      />\n    </div>\n  )\n}\n\nexport default NewTable\n","import React from 'react';\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport {\n  faAngleLeft,\n  faAngleRight,\n  faAngleDoubleLeft,\n  faAngleDoubleRight\n} from \"@fortawesome/free-solid-svg-icons\"\nimport NewPagination, { PaginationP } from './pagination-component';\nimport './paginationlist.css'\n\nconst LEFT_PAGE = \"LEFT\";\nconst RIGHT_PAGE = \"RIGHT\";\nconst LEFT = \"BEGINNING\";\nconst RIGHT = \"LAST\";\n\nconst range = (from: number, to: number, step = 1) => {\n  const range = [];\n  for (let i = from; i <= to; i+=step) {\n    range.push(i);\n  }\n  return range;\n};\n\ninterface PaginationPanelProps{\n  totalRecords    : number,\n  pageLimit?      : number,\n  pageNeighbours? : number,\n  currentPage     : number,\n  className?      : string,\n  goToPage        : string,\n  totalPages      : number,\n  onPageChanged   : (page: number) => any\n}\n\nclass PaginationPanel extends React.Component<PaginationPanelProps> {\n  componentDidUpdate(prevProps: PaginationPanelProps) {\n    if (this.props.goToPage !== prevProps.goToPage) {\n      this.gotoPage(parseInt(this.props.goToPage));\n    }\n  }\n  gotoPage = (page: number) => {\n    const { onPageChanged = (f: number) => f } = this.props;\n    const currentPage = Math.max(1, Math.min(page, this.props.totalPages));\n    const paginationData = {\n      currentPage,\n      totalPages: this.props.totalPages,\n      pageLimit: this.props.pageLimit,\n      totalRecords: this.props.totalRecords\n    };\n    onPageChanged(paginationData.currentPage);\n  };\n  handleClick = (page: number, evt: React.MouseEvent<HTMLButtonElement>) => {\n    evt.preventDefault();\n    this.gotoPage(page)\n  };\n  handleMoveLeft = (evt: React.MouseEvent<HTMLButtonElement>) => {\n    evt.preventDefault();\n    this.gotoPage(this.props.currentPage - 1);\n  };\n  handleMoveRight = (evt: React.MouseEvent<HTMLButtonElement>) => {\n    evt.preventDefault();\n    this.gotoPage(this.props.currentPage + 1);\n  };\n  handleFirst = (evt: React.MouseEvent<HTMLButtonElement>) => {\n    evt.preventDefault();\n    this.gotoPage(1);\n  }\n  handleLast = (evt: React.MouseEvent<HTMLButtonElement>) => {\n    evt.preventDefault();\n    this.gotoPage(this.props.totalPages);\n  }\n  fetchPageNumbers = () => {\n    let {pageNeighbours = 2 } = this.props;\n    const totalPages = this.props.totalPages;\n    const currentPage = this.props.currentPage;\n    pageNeighbours = Math.max(0, Math.min(pageNeighbours, 2))\n    const totalNumbers = pageNeighbours * 2 + 3;\n    const totalBlocks = totalNumbers + 2;\n    if (totalPages > totalBlocks) {\n      let pages = [];\n      const leftBound = currentPage - pageNeighbours;\n      const rightBound = currentPage + pageNeighbours;\n      const beforeLastPage = totalPages;\n      const startPage = leftBound > 1 ? leftBound : 1;\n      const endPage = rightBound < beforeLastPage ? rightBound : beforeLastPage;\n      pages = range(startPage, endPage)\n      const pagesCount = pages.length;\n      const singleSpillOffset = totalNumbers - pagesCount - 2;\n      const leftSpill = startPage > 2;\n      const rightSpill = endPage < beforeLastPage;\n      const leftSpillPage = LEFT_PAGE;\n      const rightSpillPage = RIGHT_PAGE;\n      if (leftSpill && !rightSpill) {\n        const extraPages = range(startPage - singleSpillOffset, startPage - 1);\n        pages = [...extraPages, ...pages];\n      } else if (!leftSpill && rightSpill) {\n        const extraPages = range(endPage + 1, endPage + singleSpillOffset);\n        pages = [...pages, ...extraPages];\n      } else if (leftSpill && rightSpill) {\n        pages = [...pages];\n      }\n      return [LEFT, leftSpillPage, ...pages,rightSpillPage, RIGHT];\n    }\n    return range(1, totalPages);\n  };\n  render() {\n    if (!this.props.totalRecords) return null;\n    if (this.props.totalPages === 1) return null;\n    const { currentPage } = this.props;\n    const className = this.props.className ? this.props.className : ''\n    const pages = this.fetchPageNumbers()\n    return (\n      <div className={`${className} pagination-wrapper`}>\n        <nav className={`${className} pagination-nav`}>\n          <ul className={`${className} pagination-list`}>\n            {pages.map((page, index) => {\n              if (page === LEFT)\n                return (\n                  <li key={index} className={`${className} pagination-item`}>\n                    <button\n                      className={`${className} page-left-button pagination-item-button`}\n                      onClick={this.handleFirst}\n                    >\n                      <span className={`${className} pagination-item-prev`}>\n                        <FontAwesomeIcon icon={faAngleDoubleLeft}/>\n                        </span>\n                    </button>\n                  </li>\n                );\n              if (page === LEFT_PAGE)\n                return (\n                  <li key={index} className={`${className} pagination-item`}>\n                    <button\n                      className={\n                        `${className} page-left-button pagination-item-button`\n                      }\n                      onClick={this.handleMoveLeft}\n                    >\n                      <span className={`${className} pagination-item-prev`}>\n                        <FontAwesomeIcon icon={faAngleLeft}/>\n                        </span>\n                    </button>\n                  </li>\n                );\n              if (page === RIGHT)\n                return (\n                  <li key={index} className={`${className} pagination-item`}>\n                    <button\n                      className={`${className} pagination-item-button`}\n                      onClick={this.handleLast}\n                    >\n                      <span className={`${className} pagination-item-next`}>\n                        <FontAwesomeIcon icon={faAngleDoubleRight}/>\n                        </span>\n                    </button>\n                  </li>\n                );\n              if (page === RIGHT_PAGE)\n                return (\n                  <li key={index} className={`${className} pagination-item`}>\n                    <button\n                      className={`${className} pagination-item-button`}\n                      onClick={this.handleMoveRight}\n                    >\n                      <span className={`${className} pagination-item-next`}>\n                        <FontAwesomeIcon icon={faAngleRight}/>\n                      </span>\n                    </button>\n                  </li>\n                );\n              return (\n                <li\n                  key={index}\n                  className={`${className} pagination-item${\n                    currentPage === page ? \" active\" : \"\"\n                  }`}\n                >\n                  <button\n                    className={`${className} pagination-item-button`}\n                    onClick={\n                      (e) => this.handleClick(\n                        typeof page === 'string' ? parseInt(page, 10) : page, e\n                      )\n                    }\n                  >\n                    {page}\n                  </button>\n                </li>\n              );\n            })}\n          </ul>\n        </nav>\n      </div>\n    );\n  }\n}\n\ninterface PaginationProps<T>{\n  data            : Array<T>,\n  pageSize?       : number,\n  className?      : string,\n  render          : React.ReactElement<{dataItem?: T, dataId?: number}>,\n  currentPage?    : (page: number) => number,\n  page?           : number,\n  showPanel?      : boolean,\n  pageNeighbours  : number,\n  goToPage        : string\n}\n\ninterface PaginationState{\n  currentPage: number\n}\n\nclass LegacyPagination extends React.Component<PaginationProps<any>, PaginationState> {\n  constructor(props: PaginationProps<any>) {\n    super(props)\n    this.state = {\n      currentPage: 1,\n    }\n  }\n  renderTable(page: number) {\n    let dataList = this.props.data\n    let pageSize = this.props.pageSize ? this.props.pageSize : 10\n    const list = this.paginate(dataList, page, pageSize)\n    const className = this.props.className ? this.props.className : ''\n    return (\n      <div className={`${className} pagination-render-item`}>\n        {list.map((item, id) =>\n          <React.Fragment key = {id}>\n            {React.cloneElement(this.props.render, {\n              dataItem: item,\n              dataId: (page - 1) * (pageSize) + id,\n              ...this.props.render.props\n            })}\n          </React.Fragment>\n        )}\n      </div>\n    )\n  }\n  paginate = (items: Array<any>, pageNumber: number, pageSize = 10) => {\n    let startIndex = (pageNumber - 1) * pageSize;\n    let array = items.slice(startIndex, startIndex + pageSize)\n    // fix bug delete last item of last page\n    if (array.length === 0 && pageNumber>1) {\n      pageNumber = pageNumber - 1\n      startIndex = (pageNumber - 1) * pageSize;\n      array = items.slice(startIndex, startIndex + pageSize)\n    }\n    return array;\n  }\n  onPageChanged = (pageNumber: number) => {\n    this.setState({ currentPage: pageNumber });\n    if (this.props.currentPage) this.props.currentPage(pageNumber)\n  };\n  render() {\n    const page  = this.props.page ? this.props.page : this.state.currentPage\n    const totalRecords = this.props.data ? this.props.data.length : 0\n    const table   = this.renderTable(page)\n    const className = this.props.className ? this.props.className : ''\n    const showPanel = this.props.showPanel !== undefined ?\n      this.props.showPanel : true\n    const pageSize = this.props.pageSize ? this.props.pageSize : 10\n    const totalPages = Math.ceil(totalRecords / pageSize)\n    return (\n      <div className={`${className} pagination-container`}>\n        {table}\n        {showPanel && <PaginationPanel\n          goToPage={this.props.goToPage}\n          totalRecords={totalRecords}\n          pageLimit={this.props.pageSize}\n          pageNeighbours={this.props.pageNeighbours}\n          onPageChanged={this.onPageChanged}\n          currentPage={page}\n          className={className}\n          totalPages={totalPages}\n          // key={totalRecords}\n        />}\n      </div>\n    );\n  }\n}\n\nconst Pagination =\n<T, U>(props : PaginationProps<T> | PaginationP<T, U>) => {\n  return \"props\" in props ?\n    <NewPagination {...props} /> : <LegacyPagination {...props} />\n}\n\nexport default Pagination\n","import React from \"react\"\nimport Lister from \"../lister/lister\"\nimport Pagination from \"../pagination/paginationcomponent\"\nimport MessageBox from \"../messagebox/messagebox\"\n\n// CSS\nimport './table.css'\nimport NoProcess from '../../assets/noresult/no-simul.png'\n\n// NB : If you wanna use different layout for mobile and desktop, make a new\n// component. Otherwise, it is only going to use css for switching.\nclass TableCell extends React.Component{\n  renderData(data){\n    if(typeof(data) === 'string')\n      return <p>{data}</p>\n    else if(React.isValidElement(data))\n      return data\n  }\n\n  render(){\n    const {data, className, length} = this.props\n    const style = {\n      'minWidth': `calc(100% / ${length})`,\n      'width': `calc(100% / ${length - 1})`\n    }\n    return (\n      <div className={`${className} component-table-cell`} style={style}>\n        {this.renderData(data)}\n      </div>\n    )\n  }\n}\n\ninterface ZoomRowProps {\n  rowTypes: Array<TableTypes>,\n  // data      : any,\n  // id        : Number | number\n}\ninterface TableTypes {\n  type?: string,\n  zoomable?: string,\n  sortable?: boolean\n}\n\nexport class ZoomableCell extends React.Component<ZoomRowProps, any>{\n  constructor(props) {\n    super(props)\n    this.state = {\n      zoomMsgBoxState: false\n    }\n  }\n\n  renderData(type: String, data: any) {\n    if (typeof (data) === 'string')\n      return <p>{data}</p>\n    else if (React.isValidElement(data))\n      return data\n  }\n\n  toggleZoom = () => {\n    this.setState({ zoomMsgBoxState: !this.state.zoomMsgBoxState })\n  }\n\n  renderRow(type: TableTypes, data : any){\n    let zoomable = type?.zoomable\n\n    if (zoomable===true) {\n      zoomable = 'normal'\n    } else if (zoomable===false) {\n      zoomable = 'none'\n    }\n\n\n    if (zoomable==='normal') {\n      const content   = this.renderData(type?.type, data)\n      return (\n        <React.Fragment>\n          <MessageBox state={this.state.zoomMsgBoxState} className=\"message-box-normal-zoom\">\n            <div className='zoom-cell-content normal-zoom'>\n              {content}\n            </div>\n            <div className='zoom-close-button'>\n              <button onClick={this.toggleZoom} className='popup-btn-close'>Close</button>\n            </div>\n          </MessageBox>\n          <div\n            className='table-cell-content zoomable'\n            onClick={this.toggleZoom}\n          >\n            {content}\n          </div>\n        </React.Fragment>\n      )\n    } else{\n      const content   = this.renderData(type?.type, data)\n      return (\n        <div className = 'table-cell-content'>\n          {content}\n        </div>\n      )\n    }\n  }\n\n  render() {\n    const { rowTypes, data, id, className } = this.props\n    const currentRow = rowTypes[id]\n    const style = {\n      'minWidth': `calc(100% / ${rowTypes.length})`,\n      'width': `calc(100% / ${rowTypes.length - 1})`\n    }\n    return (\n      <div className={`${className} component-table-cell`} style={style}>\n        {this.renderRow(currentRow, data)}\n      </div>\n    )\n  }\n}\n\nexport class StandardRow extends React.Component{\n  render(){\n    const {mobile, dataItem, className, render} = this.props\n    const mobileClass   = mobile ? 'mobile' : 'desktop'\n    const combine       = `${className} ${mobileClass}`\n    const totalLength   = dataItem.length\n    return (\n      <div className = {`component-table-row ${combine} `}>\n        <Lister\n          array   = {dataItem}\n          render  = {\n            render ? React.cloneElement(render, {\n              ...render.props, className : mobileClass, length : totalLength\n            }) : <TableCell\n              className = {mobileClass} length = {totalLength}\n            />\n          }\n        />\n      </div>\n    )\n  }\n}\nexport class AutoInsertIdRow extends React.Component{\n  render(){\n    const {dataItem, dataId, render, ...props}  = this.props\n    const data  = [dataId + 1, ...dataItem]\n    return <StandardRow\n      render = {render} dataItem = {data} {...props}\n    />\n  }\n}\n\nclass TableHeader extends React.Component{\n  render(){\n    const {className, dataItem, mobile}= this.props\n    return (\n      <StandardRow\n        className = {className} dataItem = {dataItem} mobile = {mobile}\n      />\n    )\n  }\n}\n\nexport interface TableProps{\n  rows        : Array<Array<any>>,\n  headers     : Array<React.ReactNode>,\n  className?  : String,\n  paginate?   : Object,\n  render      : React.ReactNode,\n  emptyRender?: React.ReactNode\n}\n\nexport default class OldTable extends React.Component<TableProps, any>{\n  constructor(props){\n    super(props)\n    this.state  = {\n      isMobile  : false\n    }\n  }\n  componentDidMount(){\n    this.setIsMobile()\n    window.addEventListener('resize', this.setIsMobile, false)\n  }\n\n  setIsMobile = () => {\n    this.setState({isMobile : window.innerWidth < 1280})\n  }\n\n  render(){\n    const {\n      rows, headers, className, paginate, render, emptyRender\n    } = this.props\n    const fixClassName = className ? className : ''\n    if(rows.length === 0 && emptyRender)\n      return React.cloneElement(emptyRender, emptyRender.props)\n    else return(\n      <div className = {`component-table ${fixClassName}`}>\n        <TableHeader\n          className = {`table-header ${fixClassName}`}\n          dataItem  = {headers}\n          mobile    = {this.state.isMobile}\n        />\n        <Pagination\n          data        = {rows}\n          render      = {\n            React.cloneElement(render, {\n              ...render.props,\n              mobile : this.state.isMobile,\n              className : `table-content ${fixClassName}`\n            })\n          }\n          {...paginate}\n        />\n      </div>\n    )\n  }\n}\n\nexport function renderNoItemTable(headers = [], text = \"No data.\", image = NoProcess) {\n  return <></>\n}\n\nexport const columnNormalType = { \"sortable\": false, \"type\": \"string\", \"zoomable\": \"none\" }\n\nexport const columnZoomType = { \"sortable\": false, \"type\": \"string\", \"zoomable\": \"normal\" }\n","import NewTable, { TableP as NewTableP } from \"./new-table\";\nimport OldTable , { TableProps }from \"./old-table\";\n\n\ntype TableP<T, U, V, W> = NewTableP<T, U, V, W> | TableProps\n\nconst Table = <T, U, V, W>(props : TableP<T, U, V, W>) => {\n  return \"rowProps\" in props ?\n    <NewTable {...props} /> : <OldTable {...props} />\n}\n\nexport default Table\n","import {\r\n  TableCellT,\r\n  TableType_ZoomableSortableT,\r\n  TableT,\r\n  TableCell_ZoomableI,\r\n} from \"interfaces/oneTableDisplay/v1\";\r\n\r\nclass Cell{\r\n  static isNumber = (\r\n    cell : TableCellT, type : TableType_ZoomableSortableT\r\n  ) : boolean => {\r\n    return (\r\n      ( typeof cell === 'string' && !isNaN(parseFloat(cell)) ) ||\r\n      ( typeof cell === 'number' ) ||\r\n      ( type.zoomable === 'normal' &&\r\n        !isNaN(parseFloat((cell as TableCell_ZoomableI).shortText))\r\n      )\r\n    )\r\n  }\r\n}\r\n\r\ntype OpHistory = { name : string, object : ModuleTable }\r\n\r\nexport default class ModuleTable{\r\n  table : TableT\r\n  history : OpHistory[]\r\n  index : number\r\n  indexes : number[]\r\n  hooks : (() => any)[]\r\n  constructor(\r\n    table : TableT,\r\n    history : OpHistory[] = [],\r\n    index : number = 0,\r\n    indexes? : number[],\r\n    hooks : (() => any)[] = []\r\n  ){\r\n    this.table = table\r\n    this.history = history.length === 0 ?\r\n      [{ name : \"base\", object : this}] : history\r\n    this.index = index\r\n    this.indexes = indexes === undefined ?\r\n      table.rows.map((_, id) => id) : indexes\r\n    this.hooks = hooks\r\n  }\r\n  createNext = (\r\n    table : TableT,\r\n    opName : string,\r\n    indexes? : number[],\r\n    hooks : typeof this.hooks = []\r\n  ) : ModuleTable => {\r\n    const moduleTable = new ModuleTable(\r\n      table, this.history, this.index + 1,\r\n      indexes === undefined ? this.indexes : indexes,\r\n      [...this.hooks, ...hooks]\r\n    )\r\n    const history = { name : opName, object : moduleTable }\r\n    if (this.history.length <= moduleTable.index)\r\n      this.history.push(history)\r\n    else\r\n      this.history[moduleTable.index] = history\r\n    moduleTable.hooks.forEach((hook) => hook())\r\n    return moduleTable\r\n  }\r\n  autoFloatingPoint = () : ModuleTable => {\r\n    const headers = [ ...this.table.headers ]\r\n    const rows = [ ...this.table.rows ]\r\n    if (rows.length === 0)\r\n      return new ModuleTable({headers, rows}, this.history)\r\n    const headersWithAutoFP = headers\r\n      .map((header, id) => {\r\n        if (\r\n          (header.type.type !== 'string' && header.type.type !== 'number') ||\r\n          header.type.fpAccuracy !== undefined\r\n        )\r\n          return header\r\n        const cell = rows[0][id]\r\n        if ( !Cell.isNumber(cell, header.type) ) return header\r\n        const maxFloatingPoint = Math.max(\r\n          ...rows.map((row) => {\r\n            const cell = row[id]\r\n            if (typeof cell === 'string'){\r\n              const fp = cell.split('.')\r\n              return fp.length > 1 ? fp[1].length : 0\r\n            }\r\n            else if (typeof cell === 'number'){\r\n              const fp = cell.toString().split('.')\r\n              return fp.length > 1 ? fp[1].length : 0\r\n            }\r\n            else if (typeof cell === 'object'){\r\n              const fp = (cell as TableCell_ZoomableI).shortText.split('.')\r\n              return fp.length > 1 ? fp[1].length : 0\r\n            }\r\n            else return 0\r\n          })\r\n        )\r\n        return {\r\n          ...header, type : { ...header.type, fpAccuracy : maxFloatingPoint}\r\n        }\r\n      })\r\n    const table = { headers : headersWithAutoFP, rows }\r\n    return this.createNext(table, \"autoFP\")\r\n  }\r\n  sort = (column : number, ascending : boolean) : ModuleTable => {\r\n    const opName = `sort ${column} ${ascending}`\r\n    const rowsWithId = this.table.rows.map((row, id) => ({row, id}))\r\n    const headers = [ ...this.table.headers ]\r\n    if (this.table.headers[column].type.type === 'id')\r\n      return ascending ?\r\n        this.createNext({headers, rows : this.table.rows.slice()}, opName) :\r\n        this.createNext(\r\n          {headers, rows : this.table.rows.slice().reverse()},\r\n          opName,\r\n          this.indexes.slice().reverse()\r\n        )\r\n    rowsWithId.sort(({row : a}, {row : b}) => {\r\n      const valA = a[column];\r\n      const valB = b[column];\r\n      if (typeof valA === 'object' && typeof valB === 'object'){\r\n        const convA = valA as TableCell_ZoomableI\r\n        const convB = valB as TableCell_ZoomableI\r\n        if (\r\n          typeof convA.shortText === 'string' &&\r\n          typeof convB.shortText === 'string'\r\n        ){\r\n          const numA = parseFloat(convA.shortText)\r\n          const numB = parseFloat(convB.shortText)\r\n          if (isNaN(numA) || isNaN(numB))\r\n            return convA.shortText.localeCompare(convB.shortText)\r\n          else\r\n            return numA - numB\r\n        }\r\n        else if (\r\n          typeof convA.shortText === 'number' &&\r\n          typeof convB.shortText === 'number'\r\n        )\r\n          return convA.shortText - convB.shortText\r\n        else return 0\r\n      }\r\n      else if (typeof valA === 'string' && typeof valB === 'string'){\r\n        const numA = parseFloat(valA)\r\n        const numB = parseFloat(valB)\r\n        if (isNaN(numA) || isNaN(numB))\r\n          return valA.localeCompare(valB);\r\n        else\r\n          return numA - numB\r\n      }\r\n      else if (typeof valA === 'number' && typeof valB === 'number'){\r\n        return valA - valB\r\n      }\r\n      //TODO: THINK ABOUT REST OF THE CASE\r\n      else return 0\r\n    });\r\n    const sortedRowsWithId = ascending ? rowsWithId : rowsWithId.reverse()\r\n    const rows = sortedRowsWithId.map((row) => row.row)\r\n    const ids = sortedRowsWithId.map((row) => row.id)\r\n    return this.createNext( {headers, rows}, opName, ids )\r\n  }\r\n  apply = (\r\n    func : ((table : TableT) => TableT),\r\n    opName : string,\r\n    hooks : typeof this.hooks = []\r\n  ) => {\r\n    const headers = this.table.headers.slice()\r\n    const rows = this.table.rows.slice()\r\n    return this.createNext( func({headers, rows}), opName, undefined, hooks)\r\n  }\r\n};\r\n","import React from \"react\"\r\nimport {\r\n  faCaretUp,\r\n  faCaretDown,\r\n  faSort\r\n} from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport Table from \"components/table/table\";\r\nimport {\r\n  TableCellT,\r\n  TableTypesT,\r\n  TableT,\r\n  TableTypeT,\r\n} from \"interfaces/oneTableDisplay/v1\";\r\nimport AutoAdjustRow, { AutoAdjustCell } from \"components/table/auto-adjust-row\";\r\nimport {\r\n  TableCellChildP,\r\n} from \"components/table/auto-adjust-row\";\r\nimport { PaginationP } from \"components/pagination/pagination-component\";\r\n// CSS\r\nimport \"./table.css\"\r\nimport ModuleTable from \"./table_manager\";\r\n\r\nconst TextCell = React.lazy(() => import('./Text'))\r\nconst ButtonCell = React.lazy(() => import('./Button'))\r\nconst ImageCell = React.lazy(() => import('./Image'))\r\nconst InputCell = React.lazy(() => import('./input-cell'))\r\n\r\ntype TableCellP = TableCellChildP<\r\n  TableCellT, {\r\n    types : TableTypesT,\r\n    onChange? : (rowId : number, colId : number, value : any) => void\r\n  }\r\n>\r\nconst TableCell = (props : TableCellP) => {\r\n  const type = props.types[props.colId]\r\n  const onChange = React.useCallback((value : any) => {\r\n    if (props.onChange)\r\n      props.onChange(props.rowId, props.colId, value)\r\n  }, [ props ])\r\n  if (type.type === 'string' || type.type === 'number')\r\n    return (\r\n      <TextCell data = {props.data as any} type = {type} />\r\n    )\r\n  else if (type.type === 'id')\r\n    return (\r\n      <TextCell data = {props.rowId + 1} type = {type} />\r\n    )\r\n  else if (type.type === 'button')\r\n    return (\r\n      <ButtonCell data = {props.data as any} type = {type} />\r\n    )\r\n  else if (type.type === 'img')\r\n    return (\r\n      <ImageCell data = {props.data as any} type = {type} />\r\n    )\r\n  else if (type.type === 'input')\r\n    return (\r\n      <InputCell\r\n        data = {props.data as any} type = {type} onChange = {onChange}\r\n      />\r\n    )\r\n  else\r\n    return <p>Error Type : {type.type}</p>\r\n}\r\n\r\ntype HeaderT = {\r\n  displayName : React.ReactNode\r\n  sortOnHeader : boolean,\r\n  sortStatus : boolean,\r\n  sortable : boolean\r\n  setSortParams : () => void\r\n}\r\n\r\ntype SocketTableHeaderP = {\r\n  data : HeaderT\r\n}\r\nconst SocketTableHeader = (props : SocketTableHeaderP) => {\r\n  const displayName = React.useMemo(() => {\r\n    const displayName = props.data.displayName\r\n    if (typeof displayName === 'string' || typeof displayName === 'number')\r\n      return <p>{displayName}</p>\r\n    else\r\n      return <>{displayName}</>\r\n  }, [ props ])\r\n  if (! props.data.sortable )\r\n    return <>{displayName}</>\r\n  else\r\n    return (\r\n      <div\r\n        className='component-table-cell-sort'\r\n        onClick = {props.data.setSortParams}\r\n      >\r\n        {displayName}\r\n        <button className='sort-btn'>\r\n          {!props.data.sortOnHeader ?\r\n            <FontAwesomeIcon icon = {faSort} /> :\r\n            !props.data.sortStatus ?\r\n            <FontAwesomeIcon icon={faCaretUp}/>\r\n            :\r\n            <FontAwesomeIcon icon={faCaretDown}/>\r\n          }\r\n        </button>\r\n      </div>\r\n    )\r\n}\r\n\r\ntype SocketTableWithRenderP = {\r\n  tableConfig : ModuleTable | TableT,\r\n  className?: string,\r\n  paginate?: Omit<PaginationP<any, any>, \"data\" | \"render\" | \"props\">,\r\n  emptyRender?: React.ReactNode\r\n  // Additional\r\n  cellProps? : Omit<\r\n    TableCellP,\r\n    keyof TableCellChildP<TableCellT, {types : TableTypeT}>\r\n  >\r\n}\r\n\r\nexport const SocketTableWithRender = (props : SocketTableWithRenderP) => {\r\n  // TODO: Fix this Clutch, Use a boolean to do this.\r\n  // Also update node js a lot of features are unsupproted\r\n  const table = React.useMemo(() => {\r\n    if (props.tableConfig instanceof ModuleTable)\r\n      return props.tableConfig\r\n    else\r\n      return new ModuleTable(props.tableConfig)\r\n  }, [ props.tableConfig ])\r\n  const lastSortIndex = table.table.headers\r\n    .slice()\r\n    .reverse()\r\n    .findIndex(\r\n      (val) => {\r\n        if (\r\n          val.type.type === 'string' ||\r\n          val.type.type === 'id' ||\r\n          val.type.type === 'number'\r\n        )\r\n          return val.type.sortable\r\n        else\r\n          return false\r\n      }\r\n    )\r\n  const [state, setState] = React.useState({\r\n    sorted : true,\r\n    sortColumn : lastSortIndex !== -1 ?\r\n      table.table.headers.length - 1 - lastSortIndex : 0\r\n  })\r\n  const processedTable = React.useMemo(\r\n    () => table.sort(state.sortColumn, state.sorted).autoFloatingPoint(),\r\n    [ table, state ]\r\n  )\r\n  const setSortParams = React.useCallback((id : number) => {\r\n    setState((state) => {\r\n      return {\r\n        sortColumn : id,\r\n        sorted : id === state.sortColumn ? !state.sorted : false\r\n      }\r\n    })\r\n  }, [ setState ])\r\n  const headers = React.useMemo(() => {\r\n    return processedTable.table.headers.map((item, id) => {\r\n      const setSort = () => setSortParams(id)\r\n      const type = item.type.type\r\n      const sortable =\r\n        (type === 'string' || type === 'number' || type === 'id') &&\r\n        item.type.sortable\r\n      return {\r\n        displayName : item.displayName,\r\n        sortStatus : state.sorted,\r\n        sortOnHeader : state.sortColumn === id,\r\n        setSortParams : setSort,\r\n        sortable : sortable\r\n      }\r\n    })\r\n  }, [ props, state, setSortParams, processedTable ])\r\n  const types = React.useMemo(() => {\r\n    return processedTable.table.headers.map((header) => header.type)\r\n  }, [ processedTable ])\r\n  const {\r\n    className = '', paginate, emptyRender, cellProps = {}\r\n  } = props\r\n  return (\r\n    <Table\r\n      className = {className}\r\n      headers = {headers}\r\n      headerRender = {AutoAdjustCell}\r\n      headerProps = {{\r\n        render : SocketTableHeader,\r\n        props : {},\r\n        className : \"table-header\"\r\n      }}\r\n      rows = {processedTable.table.rows}\r\n      rowRender = {AutoAdjustRow}\r\n      rowProps = {{\r\n        render : TableCell,\r\n        props : {\r\n          types,\r\n          ...cellProps\r\n        },\r\n        className : 'table-content'\r\n      }}\r\n      paginate = {paginate}\r\n      emptyRender = {emptyRender}\r\n    />\r\n  )\r\n}\r\nconst SocketTable = SocketTableWithRender\r\nexport default SocketTable\r\n"],"names":["LEFT_PAGE","RIGHT_PAGE","LEFT","RIGHT","range","from","to","step","arguments","length","undefined","size","Math","ceil","Array","fill","map","_","id","PaginationButton","props","className","data","_jsx","concat","children","onClick","advanceFirst","FontAwesomeIcon","icon","faAngleDoubleLeft","advanceLeft","faAngleLeft","advanceLast","faAngleDoubleRight","advanceRight","faAngleRight","currentPage","advanceToPage","_Fragment","onPageClick","React","page","setPage","onAdvanceLeftClick","onAdvancedRightClick","advanceToFirst","advanceToLast","totalPage","pageNumbers","pageNeighbours","max","min","totalNumbers","pages","leftBound","rightBound","beforeLastPage","startPage","endPage","singleSpillOffset","leftSpill","rightSpill","leftSpillPage","rightSpillPage","extraPages","totalRecords","Lister","array","render","PaginationChild","idStart","Component","renderProps","state","setState","numPages","pageSize","getCurrentPage","Error","onPageChange","table","pageNum","startId","expectedEnd","endId","paginatedData","slice","showPanel","_jsxs","PaginationPanel","AutoAdjustCell","style","minWidth","width","newProps","rowId","colId","GenericAutoAdjustRow","mobile","mobileClass","combine","totalLength","isMobile","setMobile","window","innerWidth","addEventListener","rows","headers","paginate","rowRender","emptyRender","rowProps","headerRender","headerProps","Pagination","i","push","constructor","gotoPage","onPageChanged","f","this","totalPages","pageLimit","handleClick","evt","preventDefault","handleMoveLeft","handleMoveRight","handleFirst","handleLast","fetchPageNumbers","componentDidUpdate","prevProps","goToPage","parseInt","index","e","LegacyPagination","super","items","pageNumber","startIndex","renderTable","dataList","list","item","dataItem","dataId","NewPagination","TableCell","renderData","StandardRow","TableHeader","OldTable","setIsMobile","componentDidMount","fixClassName","NewTable","Cell","isNumber","cell","type","isNaN","parseFloat","zoomable","shortText","ModuleTable","_this","history","indexes","hooks","createNext","opName","moduleTable","name","object","forEach","hook","autoFloatingPoint","header","fpAccuracy","maxFloatingPoint","row","fp","split","toString","sort","column","ascending","rowsWithId","reverse","_ref","_ref2","a","b","valA","valB","convA","convB","numA","numB","localeCompare","sortedRowsWithId","ids","apply","func","TextCell","ButtonCell","ImageCell","InputCell","types","onChange","value","SocketTableHeader","displayName","sortable","setSortParams","sortOnHeader","sortStatus","faCaretDown","faCaretUp","faSort","SocketTable","tableConfig","lastSortIndex","findIndex","val","sorted","sortColumn","processedTable","setSort","cellProps","Table","AutoAdjustRow"],"sourceRoot":""}